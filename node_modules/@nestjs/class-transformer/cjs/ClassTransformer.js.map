{"version":3,"file":"ClassTransformer.js","sourceRoot":"","sources":["../../src/ClassTransformer.ts"],"names":[],"mappings":";;;AACA,6EAA0E;AAC1E,mCAA6C;AAE7C,mFAAsE;AAEtE,MAAa,gBAAgB;IAgB3B,YAAY,CACV,MAAe,EACf,OAA+B;QAE/B,MAAM,QAAQ,GAAG,IAAI,uDAA0B,CAC7C,0BAAkB,CAAC,cAAc,EACjC;YACE,GAAG,yCAAc;YACjB,GAAG,OAAO;SACX,CACF,CAAC;QACF,OAAO,QAAQ,CAAC,SAAS,CACvB,SAAS,EACT,MAAM,EACN,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,CACV,CAAC;IACJ,CAAC;IAiBD,qBAAqB,CACnB,MAAS,EACT,WAAoB,EACpB,OAA+B;QAE/B,MAAM,QAAQ,GAAG,IAAI,uDAA0B,CAC7C,0BAAkB,CAAC,cAAc,EACjC;YACE,GAAG,yCAAc;YACjB,GAAG,OAAO;SACX,CACF,CAAC;QACF,OAAO,QAAQ,CAAC,SAAS,CACvB,WAAW,EACX,MAAM,EACN,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,CACV,CAAC;IACJ,CAAC;IAeD,YAAY,CACV,GAAwB,EACxB,KAAc,EACd,OAA+B;QAE/B,MAAM,QAAQ,GAAG,IAAI,uDAA0B,CAC7C,0BAAkB,CAAC,cAAc,EACjC;YACE,GAAG,yCAAc;YACjB,GAAG,OAAO;SACX,CACF,CAAC;QACF,OAAO,QAAQ,CAAC,SAAS,CACvB,SAAS,EACT,KAAK,EACL,GAAG,EACH,SAAS,EACT,SAAS,EACT,SAAS,CACV,CAAC;IACJ,CAAC;IAiBD,qBAAqB,CACnB,SAAY,EACZ,KAAc,EACd,OAA+B;QAE/B,MAAM,QAAQ,GAAG,IAAI,uDAA0B,CAC7C,0BAAkB,CAAC,cAAc,EACjC;YACE,GAAG,yCAAc;YACjB,GAAG,OAAO;SACX,CACF,CAAC;QACF,OAAO,QAAQ,CAAC,SAAS,CACvB,SAAS,EACT,KAAK,EACL,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,CACV,CAAC;IACJ,CAAC;IAOD,YAAY,CAAI,MAAe,EAAE,OAA+B;QAC9D,MAAM,QAAQ,GAAG,IAAI,uDAA0B,CAC7C,0BAAkB,CAAC,cAAc,EACjC;YACE,GAAG,yCAAc;YACjB,GAAG,OAAO;SACX,CACF,CAAC;QACF,OAAO,QAAQ,CAAC,SAAS,CACvB,SAAS,EACT,MAAM,EACN,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,CACV,CAAC;IACJ,CAAC;IAiBD,qBAAqB,CACnB,MAAS,EACT,UAAmB,EACnB,OAA+B;QAE/B,MAAM,QAAQ,GAAG,IAAI,uDAA0B,CAC7C,0BAAkB,CAAC,cAAc,EACjC;YACE,GAAG,yCAAc;YACjB,GAAG,OAAO;SACX,CACF,CAAC;QACF,OAAO,QAAQ,CAAC,SAAS,CACvB,UAAU,EACV,MAAM,EACN,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,CACV,CAAC;IACJ,CAAC;IAOD,SAAS,CAAI,MAAe,EAAE,OAA+B;QAC3D,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED;;OAEG;IACH,WAAW,CACT,GAAwB,EACxB,IAAY,EACZ,OAA+B;QAE/B,MAAM,UAAU,GAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACH,gBAAgB,CACd,GAAwB,EACxB,IAAY,EACZ,OAA+B;QAE/B,MAAM,UAAU,GAAU,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC;CACF;AA9OD,4CA8OC","sourcesContent":["import { ClassTransformOptions } from './interfaces';\nimport { TransformOperationExecutor } from './TransformOperationExecutor';\nimport { TransformationType } from './enums';\nimport { ClassConstructor } from './interfaces';\nimport { defaultOptions } from './constants/default-options.constant';\n\nexport class ClassTransformer {\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Converts class (constructor) object to plain (literal) object. Also works with arrays.\n   */\n  classToPlain<T extends Record<string, any>>(\n    object: T,\n    options?: ClassTransformOptions\n  ): Record<string, any>;\n  classToPlain<T extends Record<string, any>>(\n    object: T[],\n    options?: ClassTransformOptions\n  ): Record<string, any>[];\n  classToPlain<T extends Record<string, any>>(\n    object: T | T[],\n    options?: ClassTransformOptions\n  ): Record<string, any> | Record<string, any>[] {\n    const executor = new TransformOperationExecutor(\n      TransformationType.CLASS_TO_PLAIN,\n      {\n        ...defaultOptions,\n        ...options,\n      }\n    );\n    return executor.transform(\n      undefined,\n      object,\n      undefined,\n      undefined,\n      undefined,\n      undefined\n    );\n  }\n\n  /**\n   * Converts class (constructor) object to plain (literal) object.\n   * Uses given plain object as source object (it means fills given plain object with data from class object).\n   * Also works with arrays.\n   */\n  classToPlainFromExist<T extends Record<string, any>, P>(\n    object: T,\n    plainObject: P,\n    options?: ClassTransformOptions\n  ): T;\n  classToPlainFromExist<T extends Record<string, any>, P>(\n    object: T,\n    plainObjects: P[],\n    options?: ClassTransformOptions\n  ): T[];\n  classToPlainFromExist<T extends Record<string, any>, P>(\n    object: T,\n    plainObject: P | P[],\n    options?: ClassTransformOptions\n  ): T | T[] {\n    const executor = new TransformOperationExecutor(\n      TransformationType.CLASS_TO_PLAIN,\n      {\n        ...defaultOptions,\n        ...options,\n      }\n    );\n    return executor.transform(\n      plainObject,\n      object,\n      undefined,\n      undefined,\n      undefined,\n      undefined\n    );\n  }\n\n  /**\n   * Converts plain (literal) object to class (constructor) object. Also works with arrays.\n   */\n  plainToClass<T extends Record<string, any>, V extends Array<any>>(\n    cls: ClassConstructor<T>,\n    plain: V,\n    options?: ClassTransformOptions\n  ): T[];\n  plainToClass<T extends Record<string, any>, V>(\n    cls: ClassConstructor<T>,\n    plain: V,\n    options?: ClassTransformOptions\n  ): T;\n  plainToClass<T extends Record<string, any>, V>(\n    cls: ClassConstructor<T>,\n    plain: V | V[],\n    options?: ClassTransformOptions\n  ): T | T[] {\n    const executor = new TransformOperationExecutor(\n      TransformationType.PLAIN_TO_CLASS,\n      {\n        ...defaultOptions,\n        ...options,\n      }\n    );\n    return executor.transform(\n      undefined,\n      plain,\n      cls,\n      undefined,\n      undefined,\n      undefined\n    );\n  }\n\n  /**\n   * Converts plain (literal) object to class (constructor) object.\n   * Uses given object as source object (it means fills given object with data from plain object).\n   * Also works with arrays.\n   */\n  plainToClassFromExist<T extends Record<string, any>, V extends Array<any>>(\n    clsObject: T,\n    plain: V,\n    options?: ClassTransformOptions\n  ): T;\n  plainToClassFromExist<T extends Record<string, any>, V>(\n    clsObject: T,\n    plain: V,\n    options?: ClassTransformOptions\n  ): T[];\n  plainToClassFromExist<T extends Record<string, any>, V>(\n    clsObject: T,\n    plain: V | V[],\n    options?: ClassTransformOptions\n  ): T | T[] {\n    const executor = new TransformOperationExecutor(\n      TransformationType.PLAIN_TO_CLASS,\n      {\n        ...defaultOptions,\n        ...options,\n      }\n    );\n    return executor.transform(\n      clsObject,\n      plain,\n      undefined,\n      undefined,\n      undefined,\n      undefined\n    );\n  }\n\n  /**\n   * Converts class (constructor) object to new class (constructor) object. Also works with arrays.\n   */\n  classToClass<T>(object: T, options?: ClassTransformOptions): T;\n  classToClass<T>(object: T[], options?: ClassTransformOptions): T[];\n  classToClass<T>(object: T | T[], options?: ClassTransformOptions): T | T[] {\n    const executor = new TransformOperationExecutor(\n      TransformationType.CLASS_TO_CLASS,\n      {\n        ...defaultOptions,\n        ...options,\n      }\n    );\n    return executor.transform(\n      undefined,\n      object,\n      undefined,\n      undefined,\n      undefined,\n      undefined\n    );\n  }\n\n  /**\n   * Converts class (constructor) object to plain (literal) object.\n   * Uses given plain object as source object (it means fills given plain object with data from class object).\n   * Also works with arrays.\n   */\n  classToClassFromExist<T>(\n    object: T,\n    fromObject: T,\n    options?: ClassTransformOptions\n  ): T;\n  classToClassFromExist<T>(\n    object: T,\n    fromObjects: T[],\n    options?: ClassTransformOptions\n  ): T[];\n  classToClassFromExist<T>(\n    object: T,\n    fromObject: T | T[],\n    options?: ClassTransformOptions\n  ): T | T[] {\n    const executor = new TransformOperationExecutor(\n      TransformationType.CLASS_TO_CLASS,\n      {\n        ...defaultOptions,\n        ...options,\n      }\n    );\n    return executor.transform(\n      fromObject,\n      object,\n      undefined,\n      undefined,\n      undefined,\n      undefined\n    );\n  }\n\n  /**\n   * Serializes given object to a JSON string.\n   */\n  serialize<T>(object: T, options?: ClassTransformOptions): string;\n  serialize<T>(object: T[], options?: ClassTransformOptions): string;\n  serialize<T>(object: T | T[], options?: ClassTransformOptions): string {\n    return JSON.stringify(this.classToPlain(object, options));\n  }\n\n  /**\n   * Deserializes given JSON string to a object of the given class.\n   */\n  deserialize<T>(\n    cls: ClassConstructor<T>,\n    json: string,\n    options?: ClassTransformOptions\n  ): T {\n    const jsonObject: T = JSON.parse(json);\n    return this.plainToClass(cls, jsonObject, options);\n  }\n\n  /**\n   * Deserializes given JSON string to an array of objects of the given class.\n   */\n  deserializeArray<T>(\n    cls: ClassConstructor<T>,\n    json: string,\n    options?: ClassTransformOptions\n  ): T[] {\n    const jsonObject: any[] = JSON.parse(json);\n    return this.plainToClass(cls, jsonObject, options);\n  }\n}\n"]}