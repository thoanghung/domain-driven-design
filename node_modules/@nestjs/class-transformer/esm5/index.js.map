{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAItD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,cAAc,cAAc,CAAC;AAC7B,cAAc,cAAc,CAAC;AAC7B,cAAc,SAAS,CAAC;AAExB,IAAM,gBAAgB,GAAG,IAAI,gBAAgB,EAAE,CAAC;AAahD,MAAM,UAAU,YAAY,CAC1B,MAAe,EACf,OAA+B;IAE/B,OAAO,gBAAgB,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACxD,CAAC;AAiBD,MAAM,UAAU,qBAAqB,CACnC,MAAS,EACT,WAAwD,EACxD,OAA+B;IAE/B,OAAO,gBAAgB,CAAC,qBAAqB,CAAC,MAAM,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;AAC9E,CAAC;AAeD,MAAM,UAAU,YAAY,CAC1B,GAAwB,EACxB,KAAc,EACd,OAA+B;IAE/B,OAAO,gBAAgB,CAAC,YAAY,CAAC,GAAG,EAAE,KAAY,EAAE,OAAO,CAAC,CAAC;AACnE,CAAC;AAiBD,MAAM,UAAU,qBAAqB,CACnC,SAAY,EACZ,KAAc,EACd,OAA+B;IAE/B,OAAO,gBAAgB,CAAC,qBAAqB,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;AAC3E,CAAC;AAUD,MAAM,UAAU,YAAY,CAC1B,MAAe,EACf,OAA+B;IAE/B,OAAO,gBAAgB,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACxD,CAAC;AAiBD,MAAM,UAAU,qBAAqB,CACnC,MAAS,EACT,UAAmB,EACnB,OAA+B;IAE/B,OAAO,gBAAgB,CAAC,qBAAqB,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;AAC7E,CAAC;AAaD,MAAM,UAAU,SAAS,CACvB,MAAe,EACf,OAA+B;IAE/B,OAAO,gBAAgB,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACrD,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,WAAW,CACzB,GAAwB,EACxB,IAAY,EACZ,OAA+B;IAE/B,OAAO,gBAAgB,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AAC1D,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAC9B,GAAwB,EACxB,IAAY,EACZ,OAA+B;IAE/B,OAAO,gBAAgB,CAAC,gBAAgB,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AAC/D,CAAC","sourcesContent":["import { ClassTransformer } from './ClassTransformer';\nimport { ClassTransformOptions } from './interfaces';\nimport { ClassConstructor } from './interfaces';\n\nexport { ClassTransformer } from './ClassTransformer';\nexport * from './decorators';\nexport * from './interfaces';\nexport * from './enums';\n\nconst classTransformer = new ClassTransformer();\n\n/**\n * Converts class (constructor) object to plain (literal) object. Also works with arrays.\n */\nexport function classToPlain<T>(\n  object: T,\n  options?: ClassTransformOptions\n): Record<string, any>;\nexport function classToPlain<T>(\n  object: T[],\n  options?: ClassTransformOptions\n): Record<string, any>[];\nexport function classToPlain<T>(\n  object: T | T[],\n  options?: ClassTransformOptions\n): Record<string, any> | Record<string, any>[] {\n  return classTransformer.classToPlain(object, options);\n}\n\n/**\n * Converts class (constructor) object to plain (literal) object.\n * Uses given plain object as source object (it means fills given plain object with data from class object).\n * Also works with arrays.\n */\nexport function classToPlainFromExist<T>(\n  object: T,\n  plainObject: Record<string, any>,\n  options?: ClassTransformOptions\n): Record<string, any>;\nexport function classToPlainFromExist<T>(\n  object: T,\n  plainObjects: Record<string, any>[],\n  options?: ClassTransformOptions\n): Record<string, any>[];\nexport function classToPlainFromExist<T>(\n  object: T,\n  plainObject: Record<string, any> | Record<string, any>[],\n  options?: ClassTransformOptions\n): Record<string, any> | Record<string, any>[] {\n  return classTransformer.classToPlainFromExist(object, plainObject, options);\n}\n\n/**\n * Converts plain (literal) object to class (constructor) object. Also works with arrays.\n */\nexport function plainToClass<T, V>(\n  cls: ClassConstructor<T>,\n  plain: V[],\n  options?: ClassTransformOptions\n): T[];\nexport function plainToClass<T, V>(\n  cls: ClassConstructor<T>,\n  plain: V,\n  options?: ClassTransformOptions\n): T;\nexport function plainToClass<T, V>(\n  cls: ClassConstructor<T>,\n  plain: V | V[],\n  options?: ClassTransformOptions\n): T | T[] {\n  return classTransformer.plainToClass(cls, plain as any, options);\n}\n\n/**\n * Converts plain (literal) object to class (constructor) object.\n * Uses given object as source object (it means fills given object with data from plain object).\n *  Also works with arrays.\n */\nexport function plainToClassFromExist<T, V>(\n  clsObject: T[],\n  plain: V[],\n  options?: ClassTransformOptions\n): T[];\nexport function plainToClassFromExist<T, V>(\n  clsObject: T,\n  plain: V,\n  options?: ClassTransformOptions\n): T;\nexport function plainToClassFromExist<T, V>(\n  clsObject: T,\n  plain: V | V[],\n  options?: ClassTransformOptions\n): T | T[] {\n  return classTransformer.plainToClassFromExist(clsObject, plain, options);\n}\n\n/**\n * Converts class (constructor) object to new class (constructor) object. Also works with arrays.\n */\nexport function classToClass<T>(object: T, options?: ClassTransformOptions): T;\nexport function classToClass<T>(\n  object: T[],\n  options?: ClassTransformOptions\n): T[];\nexport function classToClass<T>(\n  object: T | T[],\n  options?: ClassTransformOptions\n): T | T[] {\n  return classTransformer.classToClass(object, options);\n}\n\n/**\n * Converts class (constructor) object to plain (literal) object.\n * Uses given plain object as source object (it means fills given plain object with data from class object).\n * Also works with arrays.\n */\nexport function classToClassFromExist<T>(\n  object: T,\n  fromObject: T,\n  options?: ClassTransformOptions\n): T;\nexport function classToClassFromExist<T>(\n  object: T,\n  fromObjects: T[],\n  options?: ClassTransformOptions\n): T[];\nexport function classToClassFromExist<T>(\n  object: T,\n  fromObject: T | T[],\n  options?: ClassTransformOptions\n): T | T[] {\n  return classTransformer.classToClassFromExist(object, fromObject, options);\n}\n\n/**\n * Serializes given object to a JSON string.\n */\nexport function serialize<T>(\n  object: T,\n  options?: ClassTransformOptions\n): string;\nexport function serialize<T>(\n  object: T[],\n  options?: ClassTransformOptions\n): string;\nexport function serialize<T>(\n  object: T | T[],\n  options?: ClassTransformOptions\n): string {\n  return classTransformer.serialize(object, options);\n}\n\n/**\n * Deserializes given JSON string to a object of the given class.\n */\nexport function deserialize<T>(\n  cls: ClassConstructor<T>,\n  json: string,\n  options?: ClassTransformOptions\n): T {\n  return classTransformer.deserialize(cls, json, options);\n}\n\n/**\n * Deserializes given JSON string to an array of objects of the given class.\n */\nexport function deserializeArray<T>(\n  cls: ClassConstructor<T>,\n  json: string,\n  options?: ClassTransformOptions\n): T[] {\n  return classTransformer.deserializeArray(cls, json, options);\n}\n"]}