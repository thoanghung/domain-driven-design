{"version":3,"file":"TransformOperationExecutor.js","sourceRoot":"","sources":["../../src/TransformOperationExecutor.ts"],"names":[],"mappings":"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","sourcesContent":["import { defaultMetadataStorage } from './storage';\nimport {\n  TypeHelpOptions,\n  TypeOptions,\n  ClassTransformOptions,\n  TypeMetadata,\n} from './interfaces';\nimport { TransformationType } from './enums';\nimport { getGlobal, isPromise } from './utils';\n\nfunction instantiateArrayType(arrayType: Function): Array<any> | Set<any> {\n  const array = new (arrayType as any)();\n  if (!(array instanceof Set) && !('push' in array)) {\n    return [];\n  }\n  return array;\n}\n\nexport class TransformOperationExecutor {\n  // -------------------------------------------------------------------------\n  // Private Properties\n  // -------------------------------------------------------------------------\n\n  private recursionStack = new Set<Record<string, any>>();\n\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n  constructor(\n    private transformationType: TransformationType,\n    private options: ClassTransformOptions\n  ) {}\n\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  transform(\n    source: Record<string, any> | Record<string, any>[] | any,\n    value: Record<string, any> | Record<string, any>[] | any,\n    targetType: Function | TypeMetadata,\n    arrayType: Function,\n    isMap: boolean,\n    level = 0\n  ): any {\n    if (Array.isArray(value) || value instanceof Set) {\n      const newValue =\n        arrayType &&\n        this.transformationType === TransformationType.PLAIN_TO_CLASS\n          ? instantiateArrayType(arrayType)\n          : [];\n      (value as any[]).forEach((subValue, index) => {\n        const subSource = source ? source[index] : undefined;\n        if (!this.options.enableCircularCheck || !this.isCircular(subValue)) {\n          let realTargetType;\n          if (\n            typeof targetType !== 'function' &&\n            targetType &&\n            targetType.options &&\n            targetType.options.discriminator &&\n            targetType.options.discriminator.property &&\n            targetType.options.discriminator.subTypes\n          ) {\n            if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n              realTargetType = targetType.options.discriminator.subTypes.find(\n                subType =>\n                  subType.name ===\n                  subValue[\n                    (targetType as { options: TypeOptions }).options\n                      .discriminator.property\n                  ]\n              );\n              const options: TypeHelpOptions = {\n                newObject: newValue,\n                object: subValue,\n                property: undefined,\n              };\n              const newType = targetType.typeFunction(options);\n              realTargetType === undefined\n                ? (realTargetType = newType)\n                : (realTargetType = realTargetType.value);\n              if (!targetType.options.keepDiscriminatorProperty)\n                delete subValue[targetType.options.discriminator.property];\n            }\n\n            if (this.transformationType === TransformationType.CLASS_TO_CLASS) {\n              realTargetType = subValue.constructor;\n            }\n            if (this.transformationType === TransformationType.CLASS_TO_PLAIN) {\n              subValue[targetType.options.discriminator.property] =\n                targetType.options.discriminator.subTypes.find(\n                  subType => subType.value === subValue.constructor\n                ).name;\n            }\n          } else {\n            realTargetType = targetType;\n          }\n          const value = this.transform(\n            subSource,\n            subValue,\n            realTargetType,\n            undefined,\n            subValue instanceof Map,\n            level + 1\n          );\n\n          if (newValue instanceof Set) {\n            newValue.add(value);\n          } else {\n            newValue.push(value);\n          }\n        } else if (\n          this.transformationType === TransformationType.CLASS_TO_CLASS\n        ) {\n          if (newValue instanceof Set) {\n            newValue.add(subValue);\n          } else {\n            newValue.push(subValue);\n          }\n        }\n      });\n      return newValue;\n    } else if (targetType === String && !isMap) {\n      if (value === null || value === undefined) return value;\n      return String(value);\n    } else if (targetType === Number && !isMap) {\n      if (value === null || value === undefined) return value;\n      return Number(value);\n    } else if (targetType === Boolean && !isMap) {\n      if (value === null || value === undefined) return value;\n      return Boolean(value);\n    } else if ((targetType === Date || value instanceof Date) && !isMap) {\n      if (value instanceof Date) {\n        return new Date(value.valueOf());\n      }\n      if (value === null || value === undefined) return value;\n      return new Date(value);\n    } else if (\n      !!getGlobal().Buffer &&\n      (targetType === Buffer || value instanceof Buffer) &&\n      !isMap\n    ) {\n      if (value === null || value === undefined) return value;\n      return Buffer.from(value);\n    } else if (isPromise(value) && !isMap) {\n      return new Promise((resolve, reject) => {\n        value.then(\n          (data: any) =>\n            resolve(\n              this.transform(\n                undefined,\n                data,\n                targetType,\n                undefined,\n                undefined,\n                level + 1\n              )\n            ),\n          reject\n        );\n      });\n    } else if (\n      !isMap &&\n      value !== null &&\n      typeof value === 'object' &&\n      typeof value.then === 'function'\n    ) {\n      // Note: We should not enter this, as promise has been handled above\n      // This option simply returns the Promise preventing a JS error from happening and should be an inaccessible path.\n      return value; // skip promise transformation\n    } else if (typeof value === 'object' && value !== null) {\n      // try to guess the type\n      if (\n        !targetType &&\n        value.constructor !==\n          Object /* && TransformationType === TransformationType.CLASS_TO_PLAIN*/\n      )\n        targetType = value.constructor;\n      if (!targetType && source) targetType = source.constructor;\n\n      if (this.options.enableCircularCheck) {\n        // add transformed type to prevent circular references\n        this.recursionStack.add(value);\n      }\n\n      const keys = this.getKeys(targetType as Function, value, isMap);\n      let newValue: any = source ? source : {};\n      if (\n        !source &&\n        (this.transformationType === TransformationType.PLAIN_TO_CLASS ||\n          this.transformationType === TransformationType.CLASS_TO_CLASS)\n      ) {\n        if (isMap) {\n          newValue = new Map();\n        } else if (targetType) {\n          newValue = new (targetType as any)();\n        } else {\n          newValue = {};\n        }\n      }\n\n      // traverse over keys\n      for (const key of keys) {\n        if (key === '__proto__' || key === 'constructor') {\n          continue;\n        }\n\n        const valueKey = key;\n        let newValueKey = key,\n          propertyName = key;\n        if (!this.options.ignoreDecorators && targetType) {\n          if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n            const exposeMetadata =\n              defaultMetadataStorage.findExposeMetadataByCustomName(\n                targetType as Function,\n                key\n              );\n            if (exposeMetadata) {\n              propertyName = exposeMetadata.propertyName;\n              newValueKey = exposeMetadata.propertyName;\n            }\n          } else if (\n            this.transformationType === TransformationType.CLASS_TO_PLAIN ||\n            this.transformationType === TransformationType.CLASS_TO_CLASS\n          ) {\n            const exposeMetadata = defaultMetadataStorage.findExposeMetadata(\n              targetType as Function,\n              key\n            );\n            if (\n              exposeMetadata &&\n              exposeMetadata.options &&\n              exposeMetadata.options.name\n            ) {\n              newValueKey = exposeMetadata.options.name;\n            }\n          }\n        }\n\n        // get a subvalue\n        let subValue: any = undefined;\n        if (value instanceof Map) {\n          subValue = value.get(valueKey);\n        } else if (value[valueKey] instanceof Function) {\n          subValue = value[valueKey]();\n        } else {\n          subValue = value[valueKey];\n        }\n\n        // determine a type\n        let type: any = undefined,\n          isSubValueMap = subValue instanceof Map;\n        if (targetType && isMap) {\n          type = targetType;\n        } else if (targetType) {\n          const metadata = defaultMetadataStorage.findTypeMetadata(\n            targetType as Function,\n            propertyName\n          );\n          if (metadata) {\n            const options: TypeHelpOptions = {\n              newObject: newValue,\n              object: value,\n              property: propertyName,\n            };\n            const newType = metadata.typeFunction\n              ? metadata.typeFunction(options)\n              : metadata.reflectedType;\n            if (\n              metadata.options &&\n              metadata.options.discriminator &&\n              metadata.options.discriminator.property &&\n              metadata.options.discriminator.subTypes\n            ) {\n              if (!(value[valueKey] instanceof Array)) {\n                if (\n                  this.transformationType === TransformationType.PLAIN_TO_CLASS\n                ) {\n                  type = metadata.options.discriminator.subTypes.find(\n                    subType => {\n                      if (\n                        subValue &&\n                        subValue instanceof Object &&\n                        metadata.options.discriminator.property in subValue\n                      ) {\n                        return (\n                          subType.name ===\n                          subValue[metadata.options.discriminator.property]\n                        );\n                      }\n                    }\n                  );\n                  type === undefined ? (type = newType) : (type = type.value);\n                  if (!metadata.options.keepDiscriminatorProperty) {\n                    if (\n                      subValue &&\n                      subValue instanceof Object &&\n                      metadata.options.discriminator.property in subValue\n                    ) {\n                      delete subValue[metadata.options.discriminator.property];\n                    }\n                  }\n                }\n                if (\n                  this.transformationType === TransformationType.CLASS_TO_CLASS\n                ) {\n                  type = subValue.constructor;\n                }\n                if (\n                  this.transformationType === TransformationType.CLASS_TO_PLAIN\n                ) {\n                  subValue[metadata.options.discriminator.property] =\n                    metadata.options.discriminator.subTypes.find(\n                      subType => subType.value === subValue.constructor\n                    ).name;\n                }\n              } else {\n                type = metadata;\n              }\n            } else {\n              type = newType;\n            }\n            isSubValueMap = isSubValueMap || metadata.reflectedType === Map;\n          } else if (this.options.targetMaps) {\n            // try to find a type in target maps\n            this.options.targetMaps\n              .filter(\n                map =>\n                  map.target === targetType && !!map.properties[propertyName]\n              )\n              .forEach(map => (type = map.properties[propertyName]));\n          } else if (\n            this.options.enableImplicitConversion &&\n            this.transformationType === TransformationType.PLAIN_TO_CLASS\n          ) {\n            // if we have no registererd type via the @Type() decorator then we check if we have any\n            // type declarations in reflect-metadata (type declaration is emited only if some decorator is added to the property.)\n            const reflectedType = (Reflect as any).getMetadata(\n              'design:type',\n              (targetType as Function).prototype,\n              propertyName\n            );\n\n            if (reflectedType) {\n              type = reflectedType;\n            }\n          }\n        }\n\n        // if value is an array try to get its custom array type\n        const arrayType = Array.isArray(value[valueKey])\n          ? this.getReflectedType(targetType as Function, propertyName)\n          : undefined;\n\n        // const subValueKey = TransformationType === TransformationType.PLAIN_TO_CLASS && newKeyName ? newKeyName : key;\n        const subSource = source ? source[valueKey] : undefined;\n\n        // if its deserialization then type if required\n        // if we uncomment this types like string[] will not work\n        // if (this.transformationType === TransformationType.PLAIN_TO_CLASS && !type && subValue instanceof Object && !(subValue instanceof Date))\n        //     throw new Error(`Cannot determine type for ${(targetType as any).name }.${propertyName}, did you forget to specify a @Type?`);\n\n        // if newValue is a source object that has method that match newKeyName then skip it\n        if (newValue.constructor.prototype) {\n          const descriptor = Object.getOwnPropertyDescriptor(\n            newValue.constructor.prototype,\n            newValueKey\n          );\n          if (\n            (this.transformationType === TransformationType.PLAIN_TO_CLASS ||\n              this.transformationType === TransformationType.CLASS_TO_CLASS) &&\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            ((descriptor && !descriptor.set) ||\n              newValue[newValueKey] instanceof Function)\n          )\n            //  || TransformationType === TransformationType.CLASS_TO_CLASS\n            continue;\n        }\n\n        if (!this.options.enableCircularCheck || !this.isCircular(subValue)) {\n          const transformKey =\n            this.transformationType === TransformationType.PLAIN_TO_CLASS\n              ? newValueKey\n              : key;\n          let finalValue;\n\n          if (this.transformationType === TransformationType.CLASS_TO_PLAIN) {\n            // Get original value\n            finalValue = value[transformKey];\n            // Apply custom transformation\n            finalValue = this.applyCustomTransformations(\n              finalValue,\n              targetType as Function,\n              transformKey,\n              value,\n              this.transformationType\n            );\n            // If nothing change, it means no custom transformation was applied, so use the subValue.\n            finalValue =\n              value[transformKey] === finalValue ? subValue : finalValue;\n            // Apply the default transformation\n            finalValue = this.transform(\n              subSource,\n              finalValue,\n              type,\n              arrayType,\n              isSubValueMap,\n              level + 1\n            );\n          } else {\n            if (subValue === undefined && this.options.exposeDefaultValues) {\n              // Set default value if nothing provided\n              finalValue = newValue[newValueKey];\n            } else {\n              finalValue = this.transform(\n                subSource,\n                subValue,\n                type,\n                arrayType,\n                isSubValueMap,\n                level + 1\n              );\n              finalValue = this.applyCustomTransformations(\n                finalValue,\n                targetType as Function,\n                transformKey,\n                value,\n                this.transformationType\n              );\n            }\n          }\n\n          if (finalValue !== undefined || this.options.exposeUnsetFields) {\n            if (newValue instanceof Map) {\n              newValue.set(newValueKey, finalValue);\n            } else {\n              newValue[newValueKey] = finalValue;\n            }\n          }\n        } else if (\n          this.transformationType === TransformationType.CLASS_TO_CLASS\n        ) {\n          let finalValue = subValue;\n          finalValue = this.applyCustomTransformations(\n            finalValue,\n            targetType as Function,\n            key,\n            value,\n            this.transformationType\n          );\n          if (finalValue !== undefined || this.options.exposeUnsetFields) {\n            if (newValue instanceof Map) {\n              newValue.set(newValueKey, finalValue);\n            } else {\n              newValue[newValueKey] = finalValue;\n            }\n          }\n        }\n      }\n\n      if (this.options.enableCircularCheck) {\n        this.recursionStack.delete(value);\n      }\n\n      return newValue;\n    } else {\n      return value;\n    }\n  }\n\n  private applyCustomTransformations(\n    value: any,\n    target: Function,\n    key: string,\n    obj: any,\n    transformationType: TransformationType\n  ): boolean {\n    let metadatas = defaultMetadataStorage.findTransformMetadatas(\n      target,\n      key,\n      this.transformationType\n    );\n\n    // apply versioning options\n    if (this.options.version !== undefined) {\n      metadatas = metadatas.filter(metadata => {\n        if (!metadata.options) return true;\n\n        return this.checkVersion(\n          metadata.options.since,\n          metadata.options.until\n        );\n      });\n    }\n\n    // apply grouping options\n    if (this.options.groups && this.options.groups.length) {\n      metadatas = metadatas.filter(metadata => {\n        if (!metadata.options) return true;\n\n        return this.checkGroups(metadata.options.groups);\n      });\n    } else {\n      metadatas = metadatas.filter(metadata => {\n        return (\n          !metadata.options ||\n          !metadata.options.groups ||\n          !metadata.options.groups.length\n        );\n      });\n    }\n\n    metadatas.forEach(metadata => {\n      value = metadata.transformFn({\n        value,\n        key,\n        obj,\n        type: transformationType,\n        options: this.options,\n      });\n    });\n\n    return value;\n  }\n\n  // preventing circular references\n  private isCircular(object: Record<string, any>): boolean {\n    return this.recursionStack.has(object);\n  }\n\n  private getReflectedType(\n    target: Function,\n    propertyName: string\n  ): Function | undefined {\n    if (!target) return undefined;\n    const meta = defaultMetadataStorage.findTypeMetadata(target, propertyName);\n    return meta ? meta.reflectedType : undefined;\n  }\n\n  private getKeys(\n    target: Function,\n    object: Record<string, any>,\n    isMap: boolean\n  ): string[] {\n    // determine exclusion strategy\n    let strategy = defaultMetadataStorage.getStrategy(target);\n    if (strategy === 'none') strategy = this.options.strategy || 'exposeAll'; // exposeAll is default strategy\n\n    // get all keys that need to expose\n    let keys: any[] = [];\n    if (strategy === 'exposeAll' || isMap) {\n      if (object instanceof Map) {\n        keys = Array.from(object.keys());\n      } else {\n        keys = Object.keys(object);\n      }\n    }\n\n    if (isMap) {\n      // expose & exclude do not apply for map keys only to fields\n      return keys;\n    }\n\n    if (!this.options.ignoreDecorators && target) {\n      // add all exposed to list of keys\n      let exposedProperties = defaultMetadataStorage.getExposedProperties(\n        target,\n        this.transformationType\n      );\n      if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n        exposedProperties = exposedProperties.map(key => {\n          const exposeMetadata = defaultMetadataStorage.findExposeMetadata(\n            target,\n            key\n          );\n          if (\n            exposeMetadata &&\n            exposeMetadata.options &&\n            exposeMetadata.options.name\n          ) {\n            return exposeMetadata.options.name;\n          }\n\n          return key;\n        });\n      }\n      if (this.options.excludeExtraneousValues) {\n        keys = exposedProperties;\n      } else {\n        keys = keys.concat(exposedProperties);\n      }\n\n      // exclude excluded properties\n      const excludedProperties = defaultMetadataStorage.getExcludedProperties(\n        target,\n        this.transformationType\n      );\n      if (excludedProperties.length > 0) {\n        keys = keys.filter(key => {\n          return !excludedProperties.includes(key);\n        });\n      }\n\n      // apply versioning options\n      if (this.options.version !== undefined) {\n        keys = keys.filter(key => {\n          const exposeMetadata = defaultMetadataStorage.findExposeMetadata(\n            target,\n            key\n          );\n          if (!exposeMetadata || !exposeMetadata.options) return true;\n\n          return this.checkVersion(\n            exposeMetadata.options.since,\n            exposeMetadata.options.until\n          );\n        });\n      }\n\n      // apply grouping options\n      if (this.options.groups && this.options.groups.length) {\n        keys = keys.filter(key => {\n          const exposeMetadata = defaultMetadataStorage.findExposeMetadata(\n            target,\n            key\n          );\n          if (!exposeMetadata || !exposeMetadata.options) return true;\n\n          return this.checkGroups(exposeMetadata.options.groups);\n        });\n      } else {\n        keys = keys.filter(key => {\n          const exposeMetadata = defaultMetadataStorage.findExposeMetadata(\n            target,\n            key\n          );\n          return (\n            !exposeMetadata ||\n            !exposeMetadata.options ||\n            !exposeMetadata.options.groups ||\n            !exposeMetadata.options.groups.length\n          );\n        });\n      }\n    }\n\n    // exclude prefixed properties\n    if (this.options.excludePrefixes && this.options.excludePrefixes.length) {\n      keys = keys.filter(key =>\n        this.options.excludePrefixes.every(prefix => {\n          return key.substr(0, prefix.length) !== prefix;\n        })\n      );\n    }\n\n    // make sure we have unique keys\n    keys = keys.filter((key, index, self) => {\n      return self.indexOf(key) === index;\n    });\n\n    return keys;\n  }\n\n  private checkVersion(since: number, until: number): boolean {\n    let decision = true;\n    if (decision && since) decision = this.options.version >= since;\n    if (decision && until) decision = this.options.version < until;\n\n    return decision;\n  }\n\n  private checkGroups(groups: string[]): boolean {\n    if (!groups) return true;\n\n    return this.options.groups.some(optionGroup =>\n      groups.includes(optionGroup)\n    );\n  }\n}\n"]}